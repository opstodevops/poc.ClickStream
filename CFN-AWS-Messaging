{
    "TemplateBody": "AWSTemplateFormatVersion: \"2010-09-09\"\nDescription: Advanced Developing on AWS - Lab 4 Template\nParameters:\n  LabVPCCIDR:\n    Description: CIDR Block for Lab VPC\n    Type: String\n    Default: 10.0.0.0/16\n    AllowedValues:\n      - 10.0.0.0/16\n  PublicSubnet1Param:\n    Description: Public Subnet 1\n    Type: String\n    Default: 10.0.10.0/24\n    AllowedValues:\n      - 10.0.10.0/24\n  PublicSubnet2Param:\n    Description: Public Subnet 2\n    Type: String\n    Default: 10.0.15.0/24\n    AllowedValues:\n      - 10.0.15.0/24\n  PrivateSubnet1Param:\n    Description: Private Subnet 1\n    Type: String\n    Default: 10.0.50.0/24\n    AllowedValues:\n      - 10.0.50.0/24\n  PrivateSubnet2Param:\n    Description: Private Subnet 2\n    Type: String\n    Default: 10.0.55.0/24\n    AllowedValues:\n      - 10.0.55.0/24\n  ParentLabName:\n    Type: String\n    Default: lab-4-messaging\n  LatestLinux2AMI:\n    Type: \"AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>\"\n    Default: /aws/service/ami-amazon-linux-latest/amzn-ami-hvm-x86_64-gp2\n  LatestWindows2019AMI:\n    Type: \"AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>\"\n    Default: /aws/service/ami-windows-latest/Windows_Server-2019-English-Full-Base\n  KeyName:\n    Type: AWS::EC2::KeyPair::KeyName\n    Description: Keyname for the keypair that will be used to launch EC2 instances\n  LabUrlPrefix:\n    Type: String\n    Default: \"http://us-west-2-tcprod.s3.amazonaws.com/courses/ILT-DD-300-ADVDEV/v1.3.27\"\n  #AWSAmiId:\n  #Description: \"The name of the Windows AMI to find based on search\"\n  #Type: String\n  #Default: \"x86_64,Windows_Server-2012-R2_RTM-English-64Bit-Base\"\nResources:\n  LabVPC:\n    Type: \"AWS::EC2::VPC\"\n    Properties:\n      CidrBlock:\n        Ref: LabVPCCIDR\n      EnableDnsSupport: true\n      EnableDnsHostnames: true\n      Tags:\n        - Key: VPC\n          Value: Lab VPC\n        - Key: Name\n          Value: Lab VPC\n  LabVPCInternetGateway:\n    Type: \"AWS::EC2::InternetGateway\"\n    DependsOn: LabVPC\n  LabVPCAttachGateway:\n    Type: \"AWS::EC2::VPCGatewayAttachment\"\n    Properties:\n      VpcId:\n        Ref: LabVPC\n      InternetGatewayId:\n        Ref: LabVPCInternetGateway\n  LabVPCPublicSubnet1:\n    Type: \"AWS::EC2::Subnet\"\n    DependsOn: LabVPCAttachGateway\n    Properties:\n      VpcId:\n        Ref: LabVPC\n      CidrBlock:\n        Ref: PublicSubnet1Param\n      AvailabilityZone:\n        \"Fn::Select\":\n          - \"0\"\n          - \"Fn::GetAZs\": \"\"\n      Tags:\n        - Key: Name\n          Value: Lab VPC Public Subnet 1\n  LabVPCPublicSubnet2:\n    Type: \"AWS::EC2::Subnet\"\n    DependsOn: LabVPCAttachGateway\n    Properties:\n      VpcId:\n        Ref: LabVPC\n      CidrBlock:\n        Ref: PublicSubnet2Param\n      AvailabilityZone:\n        \"Fn::Select\":\n          - \"1\"\n          - \"Fn::GetAZs\": \"\"\n      Tags:\n        - Key: Name\n          Value: Lab VPC Public Subnet 2\n  LabVPCPrivateSubnet1:\n    Type: \"AWS::EC2::Subnet\"\n    DependsOn: LabVPCAttachGateway\n    Properties:\n      VpcId:\n        Ref: LabVPC\n      CidrBlock:\n        Ref: PrivateSubnet1Param\n      AvailabilityZone:\n        \"Fn::Select\":\n          - \"0\"\n          - \"Fn::GetAZs\": \"\"\n      Tags:\n        - Key: Name\n          Value: Lab VPC Private Subnet 1\n  LabVPCPrivateSubnet2:\n    Type: \"AWS::EC2::Subnet\"\n    DependsOn: LabVPCAttachGateway\n    Properties:\n      VpcId:\n        Ref: LabVPC\n      CidrBlock:\n        Ref: PrivateSubnet2Param\n      AvailabilityZone:\n        \"Fn::Select\":\n          - \"1\"\n          - \"Fn::GetAZs\": \"\"\n      Tags:\n        - Key: Name\n          Value: Lab VPC Private Subnet 2\n  LabVPCPublicRouteTable:\n    Type: \"AWS::EC2::RouteTable\"\n    DependsOn:\n      - LabVPCAttachGateway\n    Properties:\n      VpcId:\n        Ref: LabVPC\n      Tags:\n        - Key: Name\n          Value: LabVPC Public Route Table\n  LabVPCPublicRoute:\n    Type: \"AWS::EC2::Route\"\n    DependsOn:\n      - LabVPCAttachGateway\n    Properties:\n      RouteTableId:\n        Ref: LabVPCPublicRouteTable\n      DestinationCidrBlock: 0.0.0.0/0\n      GatewayId:\n        Ref: LabVPCInternetGateway\n  LabVPCPublicSubnet1RouteTableAssociation:\n    Type: \"AWS::EC2::SubnetRouteTableAssociation\"\n    DependsOn:\n      - LabVPCAttachGateway\n    Properties:\n      SubnetId:\n        Ref: LabVPCPublicSubnet1\n      RouteTableId:\n        Ref: LabVPCPublicRouteTable\n  LabVPCPublicSubnet2RouteTableAssociation:\n    Type: \"AWS::EC2::SubnetRouteTableAssociation\"\n    DependsOn:\n      - LabVPCAttachGateway\n    Properties:\n      SubnetId:\n        Ref: LabVPCPublicSubnet2\n      RouteTableId:\n        Ref: LabVPCPublicRouteTable\n  LabVPCPrivateRouteTable:\n    Type: \"AWS::EC2::RouteTable\"\n    Properties:\n      VpcId:\n        Ref: LabVPC\n      Tags:\n        - Key: Name\n          Value: LabVPC Private Route Table\n  PrivateRoute:\n    Type: \"AWS::EC2::Route\"\n    Properties:\n      RouteTableId: !Ref LabVPCPrivateRouteTable\n      DestinationCidrBlock: 0.0.0.0/0\n      InstanceId: !Ref NATInstance\n  LabVPCPrivateSubnet1RouteTableAssociation:\n    Type: \"AWS::EC2::SubnetRouteTableAssociation\"\n    Properties:\n      SubnetId:\n        Ref: LabVPCPrivateSubnet1\n      RouteTableId:\n        Ref: LabVPCPrivateRouteTable\n  LabVPCPrivateSubnet2RouteTableAssociation:\n    Type: \"AWS::EC2::SubnetRouteTableAssociation\"\n    Properties:\n      SubnetId:\n        Ref: LabVPCPrivateSubnet2\n      RouteTableId:\n        Ref: LabVPCPrivateRouteTable\n  NATSecurityGroup:\n    Type: \"AWS::EC2::SecurityGroup\"\n    DependsOn: LabVPCAttachGateway\n    Properties:\n      GroupDescription: Enable internal access to the NAT device\n      VpcId: !Ref LabVPC\n      SecurityGroupIngress:\n        - IpProtocol: tcp\n          FromPort: 0\n          ToPort: 1024\n          CidrIp: !Ref PrivateSubnet1Param\n        - IpProtocol: udp\n          FromPort: 0\n          ToPort: 1024\n          CidrIp: !Ref PrivateSubnet1Param\n        - IpProtocol: tcp\n          FromPort: 0\n          ToPort: 1024\n          CidrIp: !Ref PrivateSubnet2Param\n        - IpProtocol: udp\n          FromPort: 0\n          ToPort: 1024\n          CidrIp: !Ref PrivateSubnet2Param\n      SecurityGroupEgress:\n        - IpProtocol: tcp\n          FromPort: 0\n          ToPort: 65535\n          CidrIp: 0.0.0.0/0\n        - IpProtocol: udp\n          FromPort: 0\n          ToPort: 65535\n          CidrIp: 0.0.0.0/0\n  NATInstance:\n    Type: \"AWS::EC2::Instance\"\n    DependsOn:\n      - LabVPCAttachGateway\n      - LabVPCPublicRoute\n      - LabVPCPublicSubnet2\n    Properties:\n      ImageId: !Ref LatestLinux2AMI\n      InstanceType: t2.micro\n      NetworkInterfaces:\n        - DeviceIndex: \"0\"\n          AssociatePublicIpAddress: true\n          SubnetId: !Ref LabVPCPublicSubnet1\n          GroupSet:\n            - !Ref NATSecurityGroup\n      SourceDestCheck: false\n      Tags:\n        - Key: Name\n          Value: NAT\n      UserData: !Base64\n        \"Fn::Join\":\n          - |+\n          - - \"#!/bin/bash\"\n            - yum -y update\n            - yum install -y mysql\n            - echo 1 > /proc/sys/net/ipv4/ip_forward\n            - echo 0 > /proc/sys/net/ipv4/conf/eth0/send_redirects\n            - >-\n              /sbin/iptables -t nat -A POSTROUTING -o eth0 -s 0.0.0.0/0 -j\n              MASQUERADE\n            - /sbin/iptables-save > /etc/sysconfig/iptables\n            - mkdir -p /etc/sysctl.d/\n            - cat <<EOF > /etc/sysctl.d/nat.conf\n            - net.ipv4.ip_forward = 1\n            - net.ipv4.conf.eth0.send_redirects = 0\n            - |\n              EOF\n\n  DevInstanceLinuxSecurityGroup:\n    Type: \"AWS::EC2::SecurityGroup\"\n    DependsOn: LabVPCAttachGateway\n    Properties:\n      GroupDescription: Security Group for Linux instance\n      VpcId:\n        Ref: LabVPC\n      Tags:\n        - Key: Name\n          Value: Linux Dev Instance SG\n        - Key: InstanceType\n          Value: General\n      SecurityGroupEgress:\n        - IpProtocol: tcp\n          FromPort: 0\n          ToPort: 65535\n          CidrIp: 0.0.0.0/0\n        - IpProtocol: udp\n          FromPort: 0\n          ToPort: 65535\n          CidrIp: 0.0.0.0/0\n      SecurityGroupIngress:\n        - IpProtocol: tcp\n          FromPort: 22\n          ToPort: 22\n          CidrIp: 0.0.0.0/0\n        - IpProtocol: tcp\n          FromPort: 80\n          ToPort: 80\n          CidrIp: 0.0.0.0/0\n  DevInstanceLinuxWaitHandle01:\n    Type: \"AWS::CloudFormation::WaitConditionHandle\"\n    Properties: {}\n  DevInstanceLinuxWaitCondition01:\n    Type: \"AWS::CloudFormation::WaitCondition\"\n    DependsOn: DevInstanceLinux\n    Properties:\n      Handle:\n        Ref: DevInstanceLinuxWaitHandle01\n      Timeout: \"1800\"\n  DevInstanceLinux:\n    Type: \"AWS::EC2::Instance\"\n    DependsOn:\n      - LabVPCAttachGateway\n    Properties:\n      KeyName:\n        Ref: KeyName\n      IamInstanceProfile:\n        Ref: GetS3BucketsInstanceProfile\n      ImageId: !Ref LatestLinux2AMI\n      InstanceType: t2.small\n      NetworkInterfaces:\n        - DeviceIndex: \"0\"\n          AssociatePublicIpAddress: true\n          SubnetId:\n            Ref: LabVPCPublicSubnet1\n          GroupSet:\n            - Ref: DevInstanceLinuxSecurityGroup\n      Tags:\n        - Key: Name\n          Value: Dev Instance - Linux\n      UserData:\n        Fn::Base64: !Sub |\n          #!/bin/bash -ex\n          yum -y update\n          mkdir /home/ec2-user/.aws\n          cat > /home/ec2-user/.aws/config <<EOF\n          [profile aws-lab-env]\n          region = ${AWS::Region}\n          EOF\n          cat > /home/ec2-user/.aws/credentials <<CREDEOF\n          [aws-lab-env]\n          aws_access_key_id=${AWSAccessKey}\n          aws_secret_access_key=${AWSAccessKey.SecretAccessKey}\n          CREDEOF\n          wget ${LabUrlPrefix}/${ParentLabName}/scripts/install-devenv.sh\n          chmod 700 install-devenv.sh\n          ./install-devenv.sh ${LabUrlPrefix} ${ParentLabName} ${DevInstanceWindows.PrivateIp} ${GeneratePassword.password}\n          /opt/aws/bin/cfn-signal -s true '${DevInstanceLinuxWaitHandle01}'\n  DevInstanceWindowsWaitHandle01:\n    Type: \"AWS::CloudFormation::WaitConditionHandle\"\n    Properties: {}\n  DevInstanceWindowsWaitCondition01:\n    Type: \"AWS::CloudFormation::WaitCondition\"\n    DependsOn: DevInstanceWindows\n    Properties:\n      Handle:\n        Ref: DevInstanceWindowsWaitHandle01\n      Timeout: \"3600\"\n  DevInstanceWindowsSecurityGroup:\n    Type: \"AWS::EC2::SecurityGroup\"\n    DependsOn: LabVPCAttachGateway\n    Properties:\n      GroupDescription: Security Group for Windows instance\n      VpcId:\n        Ref: LabVPC\n      Tags:\n        - Key: Name\n          Value: Windows Dev Instance - SG\n        - Key: InstanceType\n          Value: General\n      SecurityGroupEgress:\n        - IpProtocol: tcp\n          FromPort: 0\n          ToPort: 65535\n          CidrIp: 0.0.0.0/0\n        - IpProtocol: udp\n          FromPort: 0\n          ToPort: 65535\n          CidrIp: 0.0.0.0/0\n      SecurityGroupIngress:\n        - IpProtocol: tcp\n          FromPort: 3389\n          ToPort: 3389\n          CidrIp: 0.0.0.0/0\n        - IpProtocol: tcp\n          FromPort: 3306\n          ToPort: 3306\n          CidrIp: 0.0.0.0/0\n  DevInstanceWindows:\n    Type: \"AWS::EC2::Instance\"\n    DependsOn:\n      - LabVPC\n      - LabVPCAttachGateway\n      - LabVPCPublicRoute\n    Properties:\n      KeyName:\n        Ref: KeyName\n      IamInstanceProfile:\n        Ref: GetS3BucketsInstanceProfile\n      ImageId: !Ref LatestWindows2019AMI\n      BlockDeviceMappings:\n        - DeviceName: /dev/sda1\n          Ebs:\n            VolumeSize: 60\n            VolumeType: gp2\n      InstanceType: m4.large\n      NetworkInterfaces:\n        - DeviceIndex: \"0\"\n          AssociatePublicIpAddress: true\n          SubnetId:\n            Ref: LabVPCPublicSubnet2\n          GroupSet:\n            - Ref: DevInstanceWindowsSecurityGroup\n      Tags:\n        - Key: Name\n          Value: Dev Instance - Windows\n      UserData:\n        Fn::Base64:\n          Fn::Join:\n            [\n              \"\",\n              [\n                \"<powershell>\\n\",\n                \"$ErrorActionPreference = 'Stop'\\n\",\n                \"$success = 'true'\\n\",\n                \"$message = 'Lab configuration succeeded.'\\n\",\n                \"try {\\n\",\n                \"net user Administrator '\",\n                { \"Fn::GetAtt\": [\"GeneratePassword\", \"password\"] },\n                \"'\\n\",\n                \"New-Item -ItemType directory -Path 'C:\\\\temp', 'C:\\\\temp\\\\aws'\\n\",\n                \"$webclient = New-Object System.Net.WebClient\\n\",\n                \"$webclient.DownloadFile('https://s3.amazonaws.com/aws-cli/AWSCLI64.msi','C:\\\\temp\\\\aws\\\\AWSCLI64.msi')\\n\",\n                \"Start-Process 'C:\\\\temp\\\\aws\\\\AWSCLI64.msi' -ArgumentList /qn -Wait\\n\",\n                \"$env:Path = $env:Path + \\\";C:\\\\Program Files\\\\Amazon\\\\AWSCLI\\\\\\\"\\n\",\n                \"New-Item -ItemType directory -Path 'C:\\\\Users\\\\Administrator\\\\.aws'\\n\",\n                \"$ConfigSet = @\\\"\\r\\n\",\n                \"[profile aws-lab-env]\\r\\n\",\n                \"region = \",\n                { \"Ref\": \"AWS::Region\" },\n                \"\\r\\n\",\n                \"\\\"@\\r\\n\",\n                \"New-Item -ItemType file -Path 'C:\\\\Users\\\\Administrator\\\\.aws\\\\config' -Value $ConfigSet\\n\",\n                \"$Credentials = @\\\"\\r\\n\",\n                \"[aws-lab-env]\\r\\n\",\n                \"aws_access_key_id=\",\n                { \"Ref\": \"AWSAccessKey\" },\n                \"\\r\\n\",\n                \"aws_secret_access_key=\",\n                { \"Fn::GetAtt\": [\"AWSAccessKey\", \"SecretAccessKey\"] },\n                \"\\r\\n\",\n                \"\\\"@\\r\\n\",\n                \"New-Item -ItemType file -Path 'C:\\\\Users\\\\Administrator\\\\.aws\\\\credentials' -Value $Credentials\\n\",\n                \"\\n\",\n                \"$webClient = new-object net.webclient\\n\",\n                \"$webClient.downloadFile('\",\n                { \"Ref\": \"LabUrlPrefix\" },\n                \"/\",\n                { \"Ref\": \"ParentLabName\" },\n                \"/scripts/install-devenv.ps1', 'c:\\\\temp\\\\aws\\\\install-devenv.ps1')\\n\",\n                \"cd c:\\\\temp\\\\aws\\n\",\n                \".\\\\install-devenv.ps1 \\\"\",\n                { \"Ref\": \"LabUrlPrefix\" },\n                '\" \"',\n                { \"Ref\": \"ParentLabName\" },\n                \"\\\"\\n\",\n                \"} catch {\\n\",\n                \"$success='false'\\n\",\n                \"$message=$_.Exception\\n\",\n                \"add-content c:\\\\temp\\\\aws\\\\install-log.txt 'Exception was thrown - details below:'\\n\",\n                \"$_.Exception | format-list -force >> c:\\\\temp\\\\aws\\\\install-log.txt\\n\",\n                \"} finally {\\n\",\n                \"cfn-signal.exe -s $success '\",\n                { \"Ref\": \"DevInstanceWindowsWaitHandle01\" },\n                \"' -r \\\"$message\\\"\\n\",\n                \"restart-computer -force\\n\",\n                \"}\\n\",\n                \"</powershell>\",\n              ],\n            ]\n  GeneratePasswordLambdaExecutionRole:\n    Type: \"AWS::IAM::Role\"\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n            Action:\n              - \"sts:AssumeRole\"\n      Path: /\n      Policies:\n        - PolicyName: root\n          PolicyDocument:\n            Version: \"2012-10-17\"\n            Statement:\n              - Effect: Allow\n                Action:\n                  - \"logs:CreateLogGroup\"\n                  - \"logs:CreateLogStream\"\n                  - \"logs:PutLogEvents\"\n                Resource: \"arn:aws:logs:*:*:*\"\n              - Effect: Allow\n                Action:\n                  - \"secretsmanager:GetRandomPassword\"\n                Resource: \"*\"\n  GeneratePasswordFunction:\n    Type: \"AWS::Lambda::Function\"\n    Properties:\n      Code:\n        ZipFile: >\n          var response = require('./cfn-response');\n          var AWS = require('aws-sdk');\n          exports.handler = function(event, context) {\n                var responseData = {};\n                var params = {\n                    PasswordLength: 12,\n                    ExcludePunctuation: true,\n                    RequireEachIncludedType: true\n                };\n                var secretsmanager = new AWS.SecretsManager({region: 'us-east-1'});\n                secretsmanager.getRandomPassword(params, function(err, data) {\n                    if (err) {\n                      responseData = {Error: 'SecretsManager getRandomPassword failed'};\n                      console.log(responseData.Error + \":\",  err.stack);\n                      response.send(event, context, response.ERROR, responseData);\n                    } else {\n                      responseData['password'] = data.RandomPassword;\n                      console.log(responseData['password']);\n                      response.send(event, context, response.SUCCESS, responseData);\n                    }\n                });\n          };\n      Handler: index.handler\n      Runtime: nodejs12.x\n      Timeout: 30\n      Role:\n        Fn::GetAtt:\n          - GeneratePasswordLambdaExecutionRole\n          - Arn\n  GeneratePassword:\n    Type: \"Custom::GeneratePassword\"\n    Properties:\n      ServiceToken:\n        Fn::GetAtt:\n          - GeneratePasswordFunction\n          - Arn\n      Region:\n        Ref: AWS::Region\n  GetS3BucketsInstanceProfile:\n    Type: \"AWS::IAM::InstanceProfile\"\n    Properties:\n      Path: /\n      Roles:\n        - Ref: GetS3BucketsRole\n  GetS3BucketsPolicy:\n    Type: \"AWS::IAM::Policy\"\n    Properties:\n      PolicyName: GetS3BucketsPolicy\n      PolicyDocument:\n        Statement:\n          - Effect: Allow\n            Action:\n              - \"s3:*\"\n            Resource: \"*\"\n      Roles:\n        - Ref: GetS3BucketsRole\n  GetS3BucketsRole:\n    Type: \"AWS::IAM::Role\"\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service:\n                - ec2.amazonaws.com\n            Action:\n              - \"sts:AssumeRole\"\n      Path: /\n  LambdaKinesisToSQSRole:\n    Type: \"AWS::IAM::Role\"\n    Properties:\n      RoleName: LambdaKinesisToSQSRole\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n            Action:\n              - \"sts:AssumeRole\"\n      Path: /\n      Policies:\n        - PolicyName: LambdaKinesisToSQSPolicy\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Effect: Allow\n                Action:\n                  - \"sns:*\"\n                  - \"sqs:*\"\n                  - \"kinesis:*\"\n                  - \"cloudwatch:*\"\n                  - \"logs:*\"\n                Resource: \"*\"\n  microservicesDrawQueueFIFO:\n    Properties:\n      QueueName: microservices_drawqueue.fifo\n      FifoQueue: true\n      ContentBasedDeduplication: true\n    Type: \"AWS::SQS::Queue\"\n  microservicesDrawQueueStandard1:\n    Properties:\n      QueueName: microservices_drawqueue_1\n    Type: \"AWS::SQS::Queue\"\n  microservicesDrawQueueStandard2:\n    Properties:\n      QueueName: microservices_drawqueue_2\n    Type: \"AWS::SQS::Queue\"\n  microservicesDrawQueueStandard3:\n    Properties:\n      QueueName: microservices_drawqueue_3\n    Type: \"AWS::SQS::Queue\"\n  CIPMessageDraw:\n    Type: \"AWS::Cognito::IdentityPool\"\n    Properties:\n      IdentityPoolName: microservices_Messaging\n      AllowUnauthenticatedIdentities: true\n  microservicesDrawTopic:\n    Type: \"AWS::SNS::Topic\"\n    Properties:\n      Subscription:\n        - Endpoint: !GetAtt\n            - microservicesDrawQueueStandard1\n            - Arn\n          Protocol: sqs\n        - Endpoint: !GetAtt\n            - microservicesDrawQueueStandard2\n            - Arn\n          Protocol: sqs\n        - Endpoint: !GetAtt\n            - microservicesDrawQueueStandard3\n            - Arn\n          Protocol: sqs\n      TopicName: microservicesMessageDuplicator\n  KinesisStreamDrawingData:\n    Type: \"AWS::Kinesis::Stream\"\n    Properties:\n      Name: microservicesDrawingData\n      RetentionPeriodHours: 24\n      ShardCount: 1\n  CognitoRolesAttachment:\n    Type: \"AWS::Cognito::IdentityPoolRoleAttachment\"\n    Properties:\n      IdentityPoolId: !Ref CIPMessageDraw\n      Roles:\n        unauthenticated: !GetAtt\n          - CognitoIAMUnauthenticatedRole\n          - Arn\n        authenticated: !GetAtt\n          - CognitoIAMAuthenticatedRole\n          - Arn\n  CognitoIAMUnauthenticatedRole:\n    Type: \"AWS::IAM::Role\"\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Federated: cognito-identity.amazonaws.com\n            Action: \"sts:AssumeRoleWithWebIdentity\"\n            Condition:\n              StringEquals:\n                \"cognito-identity.amazonaws.com:aud\": !Ref CIPMessageDraw\n              \"ForAnyValue:StringLike\":\n                \"cognito-identity.amazonaws.com:amr\": unauthenticated\n      Path: /\n      Policies:\n        - PolicyName: StandardCognito\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Effect: Allow\n                Action:\n                  - \"mobileanalytics:PutEvents\"\n                  - \"cognito-sync:*\"\n                Resource:\n                  - \"*\"\n        - PolicyName: SNSPolicy\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Effect: Allow\n                Action:\n                  - \"sns:*\"\n                Resource:\n                  - !Ref microservicesDrawTopic\n        - PolicyName: KinesisPolicy\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Effect: Allow\n                Action:\n                  - \"kinesis:PutRecord\"\n                  - \"kinesis:PutRecords\"\n                Resource:\n                  - !GetAtt\n                    - KinesisStreamDrawingData\n                    - Arn\n        - PolicyName: SQSPolicy\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Effect: Allow\n                Action:\n                  - \"sqs:*\"\n                Resource:\n                  - !GetAtt\n                    - microservicesDrawQueueStandard1\n                    - Arn\n                  - !GetAtt\n                    - microservicesDrawQueueStandard2\n                    - Arn\n                  - !GetAtt\n                    - microservicesDrawQueueStandard3\n                    - Arn\n                  - !GetAtt\n                    - microservicesDrawQueueFIFO\n                    - Arn\n        - PolicyName: IoTPolicy\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Effect: Allow\n                Action:\n                  - \"iot:Connect\"\n                Resource:\n                  - \"*\"\n              - Effect: Allow\n                Action:\n                  - \"iot:Publish\"\n                  - \"iot:Receive\"\n                Resource:\n                  - \"arn:aws:iot:*:*:topic/microservices/drawingdemo\"\n              - Effect: Allow\n                Action:\n                  - \"iot:Subscribe\"\n                Resource:\n                  - \"arn:aws:iot:*:*:topicfilter/microservices/drawingdemo\"\n  CognitoIAMAuthenticatedRole:\n    Type: \"AWS::IAM::Role\"\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Federated: cognito-identity.amazonaws.com\n            Action: \"sts:AssumeRoleWithWebIdentity\"\n            Condition:\n              StringEquals:\n                \"cognito-identity.amazonaws.com:aud\": !Ref CIPMessageDraw\n              \"ForAnyValue:StringLike\":\n                \"cognito-identity.amazonaws.com:amr\": authenticated\n      Path: /\n      Policies:\n        - PolicyName: StandardCognito\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Effect: Allow\n                Action:\n                  - \"mobileanalytics:PutEvents\"\n                  - \"cognito-sync:*\"\n                Resource:\n                  - \"*\"\n  # SQSPolicy:\n  #   Type: 'AWS::SQS::QueuePolicy'\n  #   Properties:\n  #     PolicyDocument:\n  #       Version: 2012-10-17\n  #       Id: AllowAll\n  #       Statement:\n  #         - Sid: '1'\n  #           Effect: Allow\n  #           Principal: '*'\n  #           Action:\n  #             - 'sqs:SendMessage'\n  #             - 'sqs:ReceiveMessage'\n  #           Resource: '*'\n  #     Queues:\n  #       - !Ref microservicesDrawQueueStandard1\n  #       - !Ref microservicesDrawQueueStandard2\n  #       - !Ref microservicesDrawQueueStandard3\n  #       - !Ref microservicesDrawQueueFIFO\n  SQSPolicyStandard1:\n    Type: \"AWS::SQS::QueuePolicy\"\n    Properties:\n      PolicyDocument:\n        Version: 2012-10-17\n        Id: AllowAll\n        Statement:\n          - Sid: \"1\"\n            Effect: Allow\n            Principal: \"*\"\n            Action:\n              - \"sqs:SendMessage\"\n              - \"sqs:ReceiveMessage\"\n            Resource: !GetAtt microservicesDrawQueueStandard1.Arn\n            Condition:\n              ArnEquals:\n                aws:SourceArn: !Ref microservicesDrawTopic\n      Queues:\n        - !Ref microservicesDrawQueueStandard1\n\n  SQSPolicyStandard2:\n    Type: \"AWS::SQS::QueuePolicy\"\n    Properties:\n      PolicyDocument:\n        Version: 2012-10-17\n        Id: AllowAll\n        Statement:\n          - Sid: \"1\"\n            Effect: Allow\n            Principal: \"*\"\n            Action:\n              - \"sqs:SendMessage\"\n              - \"sqs:ReceiveMessage\"\n            Resource: !GetAtt microservicesDrawQueueStandard2.Arn\n            Condition:\n              ArnEquals:\n                aws:SourceArn: !Ref microservicesDrawTopic\n      Queues:\n        - !Ref microservicesDrawQueueStandard2\n\n  SQSPolicyStandard3:\n    Type: \"AWS::SQS::QueuePolicy\"\n    Properties:\n      PolicyDocument:\n        Version: 2012-10-17\n        Id: AllowAll\n        Statement:\n          - Sid: \"1\"\n            Effect: Allow\n            Principal: \"*\"\n            Action:\n              - \"sqs:SendMessage\"\n              - \"sqs:ReceiveMessage\"\n            Resource: !GetAtt microservicesDrawQueueStandard3.Arn\n            Condition:\n              ArnEquals:\n                aws:SourceArn: !Ref microservicesDrawTopic\n      Queues:\n        - !Ref microservicesDrawQueueStandard3\n\n  SQSPolicyFIFO:\n    Type: \"AWS::SQS::QueuePolicy\"\n    Properties:\n      PolicyDocument:\n        Version: 2012-10-17\n        Id: AllowAll\n        Statement:\n          - Sid: \"1\"\n            Effect: Allow\n            Principal: \"*\"\n            Action:\n              - \"sqs:SendMessage\"\n              - \"sqs:ReceiveMessage\"\n            Resource: !GetAtt microservicesDrawQueueFIFO.Arn\n            Condition:\n              ArnEquals:\n                aws:SourceArn: !Ref microservicesDrawTopic\n      Queues:\n        - !Ref microservicesDrawQueueFIFO\n\n  ###########\n  # Creates the QLReadOnly group, assigns it to awsstudent, and attches the ReadOnlyAccess policy.\n  # This grants global read-only permissions to the user.\n  ###########\n\n  ReadOnlyGroup:\n    Type: AWS::IAM::Group\n    Properties:\n      GroupName: QLReadOnly\n      ManagedPolicyArns: [\"arn:aws:iam::aws:policy/ReadOnlyAccess\"]\n\n  GroupAssignment:\n    Type: AWS::IAM::UserToGroupAddition\n    DependsOn: ReadOnlyGroup\n    Properties:\n      GroupName: QLReadOnly\n      Users:\n        - awsstudent\n\n  LabUser:\n    Type: AWS::IAM::User\n    Properties:\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/ReadOnlyAccess\n        - !Ref LabPolicy\n  AWSAccessKey:\n    Type: AWS::IAM::AccessKey\n    Properties:\n      Status: Active\n      UserName: !Ref LabUser\n\n  LabPolicy:\n    Type: AWS::IAM::ManagedPolicy\n    Properties:\n      PolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Action:\n            - sns:CreateTopic\n            - sqs:ChangeMessageVisibility\n            - sqs:ChangeMessageVisibilityBatch\n            - s3:CreateBucket\n            - s3:PutEncryptionConfiguration\n            - s3:PutBucketPublicAccessBlock\n            - s3:DeleteBucket\n            - s3:PutObject\n            - s3:PutBucketPolicy\n            - s3:PutBucketVersioning\n            - s3:PutBucketWebsite\n            - s3:PutBucketAcl\n            - s3:PutReplicationConfiguration\n            - s3:PutBucketNotification\n            - s3:PutBucketLogging\n            - s3:PutObjectVersionAcl\n            - s3:DeleteObjectVersion\n            - s3:AbortMultipartUpload\n            - sqs:DeleteQueue\n            - lambda:CreateEventSourceMapping\n            - lambda:CreateFunction\n            - lambda:AddPermission\n            - lambda:RemovePermission\n            - lambda:UpdateFunctionConfiguration\n            - lambda:GetFunctionConfiguration\n            - lambda:UpdateFunctionCode\n            - lambda:InvokeFunction\n            - lambda:TagResource\n            - lambda:PublishVersion\n            - cloudwatch:PutMetricAlarm\n            Effect: Allow\n            Resource: \"*\"\n          - Action:\n              - \"iam:PassRole\"\n            Resource:\n              - \"arn:aws:iam::*:role/LambdaKinesisToSQSRole\"\n            Effect: Allow\n          - Action:\n              - \"iam:assignpolicy\"\n            Resource:\n              - \"arn:aws:iam::*:role/LambdaKinesisToSQSRole\"\n            Effect: Allow\n\nOutputs:\n  # LabVPCId:\n  #   Value:\n  #       Ref: LabVPC\n  # LabVPCPublicSubnet2:\n  #   Value:\n  #       Ref: LabVPCPublicSubnet2\n  # LinuxInstanceId:\n  #   Value:\n  #       Ref: DevInstanceLinux\n  # WindowsInstanceId:\n  #   Value:\n  #       Ref: DevInstanceWindows\n  # DevInstanceWindowsSecurityGroup:\n  #   Value:\n  #       Ref: DevInstanceWindowsSecurityGroup\n  # DevInstanceLinuxSecurityGroup:\n  #   Value:\n  #       Ref: DevInstanceLinuxSecurityGroup\n  GuacamoleLink:\n    Value: !Sub |\n      http://${DevInstanceLinux.PublicIp}/guacamole/\n  WindowsInstanceIP:\n    Value: !Sub |\n      ${DevInstanceWindows.PublicIp}\n  WindowsPassword:\n    Value:\n      Fn::GetAtt:\n        - GeneratePassword\n        - password\n  QueueUrl1:\n    Description: SQS.Standard.QueueUrl\n    Value: !Ref microservicesDrawQueueStandard1\n  QueueUrl2:\n    Description: SQS.Secondary.QueueUrl\n    Value: !Ref microservicesDrawQueueStandard2\n  QueueUrl3:\n    Description: SQS.Tertiary.QueueUrl\n    Value: !Ref microservicesDrawQueueStandard3\n  FIFOQueueUrl:\n    Description: SQS.FIFO.QueueUrl\n    Value: !Ref microservicesDrawQueueFIFO\n  TopicARN:\n    Description: SNS.TopicARN\n    Value: !Ref microservicesDrawTopic\n  CognitoIdentityPoolId:\n    Description: Cognito.IdentityPoolId\n    Value: !Ref CIPMessageDraw\n\n  AWSAccessKey:\n    Value: !Ref AWSAccessKey\n  AWSSecretAccessKey:\n    Value: !GetAtt AWSAccessKey.SecretAccessKey\n\n  AccountID:\n    Value: !Ref AWS::AccountId\n\n  Region:\n    Value: !Ref AWS::Region\n",
    "StagesAvailable": [
        "Original",
        "Processed"
    ]
}
